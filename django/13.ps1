<# 13
 Develop a search application in Django using AJAX that displays courses enrolled by a 
student being searched
#>

mkdir .\thirteens

Set-Location .\thirteens

python -m venv env

Set-ExecutionPolicy RemoteSigned -Scope CurrentUser

.\env\Scripts\activate

pip install django 

Set-Location .\env

django-admin startproject thirteen

Set-Location .\thirteen

python manage.py startapp myapp 

@"
from django.db import models

class Course(models.Model):
    course_code=models.CharField(max_length=40)
    course_name=models.CharField(max_length=100)
    course_credits=models.IntegerField()
    def __str__(self):
        return self.course_name
class Student(models.Model):
    student_usn=models.CharField(max_length=20)
    student_name=models.CharField(max_length=100)
    student_sem=models.IntegerField()
    enrolment=models.ManyToManyField(Course)
    def __str__(self):
        return self.student_name+"("+self.student_usn+")"
"@ | Set-Content .\myapp\models.py  

@"

from django.http import JsonResponse
from django.shortcuts import render
from .models import Course, Student

def course_search_ajax(request):
    if request.method == "POST":
        cid = request.POST.get("cname")
        students = Student.objects.filter(enrolment__id=cid).distinct()
        student_list = [
            {
                "name": student.student_name,
                "usn": student.student_usn,
                "sem": student.student_sem,
            }
            for student in students
        ]
        return JsonResponse({"students": student_list})

    else:
        courses = Course.objects.all()
        return render(request, "course_search_aj.html", {"courses": courses})

"@ | Set-Content .\myapp\views.py   

@"
from django.contrib import admin
from .models import Student, Course
admin.site.register(Student)
admin.site.register(Course)

"@ | Set-Content .\myapp\admin.py  

@"
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'thirteen.settings')
django.setup()

from myapp.models import Course, Student


course1 = Course(course_code="IS101", course_name="FULLSTACK Development", course_credits=3)
course1.save()

course2 = Course(course_code="CS101", course_name="Calculus", course_credits=4)
course2.save()


student1 = Student(student_usn="USN1", student_name="Diya", student_sem=6)
student1.save()

student2 = Student(student_usn="USN2", student_name="Priti", student_sem=5)
student2.save()

student3 = Student(student_usn="USN3", student_name="Ayra" , student_sem=4)
student3.save()

student1.enrolment.add(course1, course2)
student2.enrolment.add(course1)
student3.enrolment.add(course1 , course2)


student1.save()
student2.save()
student3.save()

"@ | Set-Content .\InsertValues.py 

@"
# myapp/urls.py
from django.urls import path
from .views import course_search_ajax

urlpatterns = [
    path('course_search_ajax/', course_search_ajax, name='course_search_ajax'),
]

"@ | Set-Content .\myapp\urls.py

@"
"""
Django settings for thirteen project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-me7x)whu3u=q9l+z+@jc)(tt!d4sjoldbp_ozk#at!io+_9r@y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'thirteen.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'thirteen.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

"@ | Set-Content .\thirteen\settings.py 

@"
from django.contrib import admin
from django.urls import path,include
urlpatterns = [
path('admin/', admin.site.urls),
path('',include('myapp.urls'))
]
"@ | Set-Content .\thirteen\urls.py 

mkdir .\myapp\templates 

@"

<html>
<head>
    <title>Course Search</title>
    <style type="text/css">
        #i1 {background-color: lightgreen; color: brown; display: table;}
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Search for Students by Course</h1>
    <form id="search-form" method="POST">
        {% csrf_token %}
        <label for="cname">Select Course:</label>
        <select name="cname" id="cname">
            {% for course in courses %}
                <option value="{{ course.id }}">{{ course.course_name }}</option>
            {% endfor %}
        </select>
        <button type="submit">Search</button>
    </form>

    <div id="results">
    </div>

    <script>
        `$(document).ready(function() {
            `$('#search-form').on('submit', function(event) {
                event.preventDefault();
                
                $.ajax({
                    type: 'POST',
                    url: "{% url 'course_search_ajax' %}",
                    data: `$(this).serialize(),
                    success: function(response) {
                        var resultsHtml = '<h2 id="i1">Enrolled Students</h2>';
                        resultsHtml += '<table><tr><th>Student Name</th><th>Student USN</th><th>Student Semester</th></tr>';
                        
                        if (response.students.length === 0) {
                            resultsHtml += '<tr><td colspan="3">No Students enrolled</td></tr>';
                        } else {
                            $.each(response.students, function(index, student) {
                                resultsHtml += '<tr>';
                                resultsHtml += '<td>' + student.name + '</td>';
                                resultsHtml += '<td>' + student.usn + '</td>';
                                resultsHtml += '<td>' + student.sem + '</td>';
                                resultsHtml += '</tr>';
                            });
                        }
                        
                        resultsHtml += '</table>';
                        `$('#results').html(resultsHtml);
                    }
                });
            });
        });
    </script>
</body>
</html>

"@  | Set-Content .\myapp\templates\course_search_aj.html

python manage.py makemigrations

python manage.py migrate 

python .\InsertValues.py 

python manage.py runserver 


